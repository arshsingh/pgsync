version: '3'
services:
  db1:
    image: postgres:9.5
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${SRC_DB}
      POSTGRES_USER: ${SRC_USER}
      POSTGRES_PASSWORD: ${SRC_PASS}
    volumes:
      - "./add-data.sql:/docker-entrypoint-initdb.d/add-data.sql"
      - "db1-pgdata:/var/lib/postgresql/data"
  db2:
    image: postgres:10
    ports:
      - "5434:5432"
    environment:
      POSTGRES_DB: ${DEST_DB}
      POSTGRES_USER: ${DEST_USER}
      POSTGRES_PASSWORD: ${DEST_PASS}
    volumes:
      - "db2-pgdata:/var/lib/postgresql/data"
  db-sync:
    build: ../..
    links:
      - db1:db1
      - db2:db2
    environment:
      FROM_USER: ${SRC_USER}
      FROM_PASS: ${SRC_PASS}
      FROM_HOST: db1
      FROM_PORT: 5432
      FROM_DB: ${SRC_DB}
      TO_USER: ${DEST_USER}
      TO_PASS: ${DEST_PASS}
      TO_HOST: db2
      TO_PORT: 5432
      TO_DB: ${DEST_DB}
      # uncomment and add your DSN to enable Sentry.io reporting. A simple way
      # to trigger an error is to change TO_HOST: db99 (invalid hostname).
      # SENTRY_DSN: 'https://11111111111111111111111111111111@o222222.ingest.sentry.io/3333333'
    # note: don't override the entrypoint when using this container, this is just for a demo to run SQL after the sync
    entrypoint: |
      /bin/sh -c "
        echo 'waiting for DBs' && \
        sleep 10 && \
        SCHEMA_ONLY=1 /bin/sh /app/run.sh && \
        /bin/sh /app/run.sh && \
        sleep 1 && \
        PGPASSWORD=pass psql -h db2 -U user -d db2 -c 'select * from blah;' && \
        echo 'Now running under cron every minute, use ctrl+c to exit' && \
        CRON_SCHEDULE='* * * * *' exec /app/entrypoint.sh"
    depends_on:
      - db1
      - db2
volumes:
  db1-pgdata:
  db2-pgdata:
